# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  pkgs,
  config,
  lib,
  modulesPath,
  ...
}: {
  imports = [(modulesPath + "/installer/scan/not-detected.nix")];

  boot = {
    initrd.availableKernelModules = [
      "xhci_pci"
      "ahci"
      "nvme"
      "usbhid"
      "usb_storage"
      "sd_mod"
    ];
    initrd.kernelModules = [];
    kernelModules = ["kvm-intel"];
    extraModulePackages = [];
  };
  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp1s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp2s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

  hardware.graphics = {
    enable = true;
    enable32Bit = true;
    extraPackages = with pkgs; [
      # Hardware transcoding.
      intel-media-driver # LIBVA_DRIVER_NAME=iHD
      libvdpau-va-gl
      vaapiIntel # LIBVA_DRIVER_NAME=i965 (older but can work better for some applications)
      vaapiVdpau
      vainfo
      # HDR tone mapping.
      intel-compute-runtime
      ocl-icd
    ];
    extraPackages32 = with pkgs; [
      # Hardware transcoding.
      intel-media-driver # LIBVA_DRIVER_NAME=iHD
      libvdpau-va-gl
      vaapiIntel # LIBVA_DRIVER_NAME=i965 (older but can work better for some applications)
      vaapiVdpau
      # HDR tone mapping.
      intel-compute-runtime
      ocl-icd
    ];
  };
}
