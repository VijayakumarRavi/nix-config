name: üèóÔ∏è Build and Release custom RPI image and NixOS ISO

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch: null
  schedule:
    - cron: 0 4 * * *

jobs:
  Build:
    name: Buildig üë∑‚Äç‚ôÇÔ∏è New üÜï Nix ISO üìÄ
    runs-on: ubuntu-latest
    strategy:
      matrix:
        system: [x86_64-linux, aarch64-linux]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Nix
        uses: nixbuild/nix-quick-install-action@v28
        with:
          nix_conf: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            # keep all store paths necessary to build the outputs
            keep-outputs = true
            keep-derivations = true

      - name: Cache Nix store
        id: nix-cache
        uses: nix-community/cache-nix-action@v5
        with:
          primary-key: nix-${{ matrix.system }}-${{ hashfiles('**/flake.nix', '**/flake.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ matrix.system }}-
          # collect garbage until Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          gc-max-store-size: 5000000000
          # purge all versions of the cache
          purge: true
          purge-prefixes: nix-${{ matrix.system }}-
          purge-created: 300 # created more than this number of seconds ago relative to the start of the `Post Restore` phase
          purge-primary-key: never # except the version with the `primary-key`, if it exists

      - name: Bump flake.lock
        run: nix flake update --accept-flake-config

      - name: Build NixOS ISO
        if: steps.nix-cache.outputs.hit != 'true' && matrix.system ==  'x86_64-linux'
        run: nix build --accept-flake-config .#nixos-iso

      - name: Rename NixOS ISO
        if: steps.nix-cache.outputs.hit != 'true' && matrix.system ==  'x86_64-linux'
        run: sudo mv ./result/iso/NixOS.iso NixOS.iso

      - name: Setup QEMU for ARM builds
        if: steps.nix-cache.outputs.hit != 'true' && matrix.system ==  'aarch64-linux'
        run: sudo apt-get update && sudo apt-get install -y qemu qemu-user-static binfmt-support

      - name: Build NixOS Image (ARM)
        if: steps.nix-cache.outputs.hit != 'true' && matrix.system ==  'aarch64-linux'
        run: nix build --accept-flake-config .#rpi-iso --system "aarch64-linux"

      - name: Rename NixOS Image (ARM)
        if: steps.nix-cache.outputs.hit != 'true' && matrix.system ==  'aarch64-linux'
        run: sudo mv ./result/sd-image/NixPi.img.zst NixPi.img.zst

      - name: Create GitHub Release
        if: steps.nix-cache.outputs.hit != 'true' && matrix.system ==  'x86_64-linux'
        uses: softprops/action-gh-release@v2
        with:
          name: Nixos ISO Daily Build
          tag_name: "daily-build"
          make_latest: true
          generate_release_notes: true
          files: |
            NixOS.iso
            NixPi.img.zst

      - name: Commit and Push
        if: matrix.system == 'x86_64-linux'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Bot ü§ñ(flake): bump flake.lock"
          commit_user_name: Flake Bot
          commit_options: --no-verify --signoff
          commit_author: Flake Bot <github-actions@github.com>
          branch: master
          file_pattern: flake.lock
          skip_dirty_check: false
          skip_fetch: true
